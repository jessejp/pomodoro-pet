/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three/src/loaders/TextureLoader.js";

type GLTFResult = GLTF & {
  nodes: {
    floor: THREE.Mesh;
    wall_room: THREE.Mesh;
    window_frame: THREE.Mesh;
    curtain_pole: THREE.Mesh;
    curtain__loops_r: THREE.Mesh;
    curtain_r: THREE.Mesh;
    wall_outside: THREE.Mesh;
    Cube_table: THREE.Mesh;
    Cube_shelf_legs: THREE.Mesh;
    Cube_shelf_planes: THREE.Mesh;
    window_frame_bottom: THREE.Mesh;
    door_handle: THREE.Mesh;
    doorway: THREE.Mesh;
    Door_panes: THREE.Mesh;
    door_window_frame: THREE.Mesh;
    window_emission: THREE.Mesh;
    emission_window: THREE.Mesh;
  };
};

const material = new THREE.MeshBasicMaterial();
const materialBackground = new THREE.MeshBasicMaterial({ color: 0xffffff });
const filePath = "models/room/room.glb";

export function Room(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF(filePath) as GLTFResult;

  const texture = useLoader(
    TextureLoader,
    "textures/room_texture.png"
  );
  texture.flipY = false;
  texture.channel = 1;

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.floor.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_room.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_frame.geometry}
        material={material}
        material-map={texture}
        position={[0, 0.67, -1.46]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_pole.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain__loops_r.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_r.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_outside.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_table.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_legs.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_planes.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_frame_bottom.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.door_handle.geometry}
        material={material}
        material-map={texture}
        position={[1.256, 0.586, -0.329]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.doorway.geometry}
        material={material}
        material-map={texture}
        position={[1.3, 0.64, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Door_panes.geometry}
        material={material}
        material-map={texture}
        position={[1.262, 0.64, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.door_window_frame.geometry}
        material={material}
        material-map={texture}
        position={[1.3, 0.836, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_emission.geometry}
        material={materialBackground}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.emission_window.geometry}
        material={materialBackground}
        position={[1.3, 0.836, 0]}
      />
    </group>
  );
}

useGLTF.preload(filePath);
