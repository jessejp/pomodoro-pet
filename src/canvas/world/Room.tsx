/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three/src/loaders/TextureLoader.js";

type GLTFResult = GLTF & {
  nodes: {
    floor: THREE.Mesh;
    wall_room: THREE.Mesh;
    window_frame: THREE.Mesh;
    curtain_pole: THREE.Mesh;
    curtain__loops_r: THREE.Mesh;
    curtain_r: THREE.Mesh;
    wall_outside: THREE.Mesh;
    doorway: THREE.Mesh;
    Cube_table: THREE.Mesh;
    Cube_shelf_legs: THREE.Mesh;
    Cube_shelf_planes: THREE.Mesh;
    placeholder_book: THREE.Mesh;
  };
  materials: {
    material_room: THREE.MeshBasicMaterial;
    background: THREE.MeshBasicMaterial;
  };
};

const material = new THREE.MeshBasicMaterial();
const materialBackground = new THREE.MeshBasicMaterial({ color: 0xffffff });

export function Room(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("models/room/room.glb") as GLTFResult;

  const texture = useLoader(
    TextureLoader,
    "textures/room_baked_2023-09-05_1024x1024.png"
  );
  texture.flipY = false;
  texture.channel = 1;

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.floor.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_room.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_frame.geometry}
        material={material}
        material-map={texture}
        position={[0, 0.67, -1.46]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_pole.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain__loops_r.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_r.geometry}
        material={material}
        material-map={texture}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_outside.geometry}
        material={material}
        material-map={texture}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.doorway.geometry}
        material={materialBackground}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_table.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_legs.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_planes.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.placeholder_book.geometry}
        material={material}
        material-map={texture}
        position={[-1, 0.3, -0.01]}
      />
    </group>
  );
}

useGLTF.preload("models/room/room.glb");
