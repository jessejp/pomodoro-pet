/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    floor: THREE.Mesh;
    floor_planks: THREE.Mesh;
    wall_room: THREE.Mesh;
    window_frame: THREE.Mesh;
    curtain_pole: THREE.Mesh;
    curtain__loops_r: THREE.Mesh;
    curtain_r: THREE.Mesh;
    wall_outside: THREE.Mesh;
    doorway: THREE.Mesh;
    Cube_table: THREE.Mesh;
    Cylinder_Chair: THREE.Mesh;
    Cube_shelf_legs: THREE.Mesh;
    Cube_shelf_planes: THREE.Mesh;
    background_scene: THREE.Mesh;
  };
  materials: {
    room: THREE.MeshBasicMaterial;
    room: THREE.MeshBasicMaterial;
  };
};

export function TestRoom(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/pomodoro_pets_room_nomaterial.glb"
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.floor.geometry}
        material={materials.room}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.floor_planks.geometry}
        material={materials.room}
        position={[0, -0.12, -0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_room.geometry}
        material={materials.room}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_frame.geometry}
        material={materials.room}
        position={[0, 0.67, -1.46]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_pole.geometry}
        material={materials.room}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain__loops_r.geometry}
        material={materials.room}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.curtain_r.geometry}
        material={materials.room}
        position={[0, 1.7, -1.26]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_outside.geometry}
        material={materials.room}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.doorway.geometry}
        material={materials.room}
        position={[0, -0.1, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_table.geometry}
        material={materials.room}
        position={[-1, 0.3, -0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder_Chair.geometry}
        material={materials.room}
        position={[-0.4, 0.192, -0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_legs.geometry}
        material={materials.room}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube_shelf_planes.geometry}
        material={materials.room}
        position={[-1, 0.3, -0.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.background_scene.geometry}
        material={materials.room}
        position={[0, -0.2, 0]}
      />
    </group>
  );
}

useGLTF.preload("/models/pomodoro_pets_room_nomaterial.glb");
