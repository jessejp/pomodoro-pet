/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { CosmeticItem, PetType } from "../../store/types";
import { useEffect, useRef, useState } from "react";

type GLTFResult = GLTF & {
  nodes: {
    head_slot_beanie: THREE.SkinnedMesh;
  };
  materials: {
    vertex_color: THREE.MeshBasicMaterial;
  };
};

type HeadSlotProps = React.JSX.IntrinsicElements["skinnedMesh"] & {
  pet: PetType;
  cosmetic: CosmeticItem["name"];
};

const HeadSlot = (props: HeadSlotProps) => {
  const [morphInfluence, setMorphInfluence] = useState(0);
  const mesh = useRef<THREE.SkinnedMesh>(null);
  const model = useGLTF(`models/cosmetic_${props.cosmetic}.glb`) as GLTFResult;
  const { morphTargetDictionary } = model.nodes.head_slot_beanie;

  useEffect(() => {
    if (
      morphTargetDictionary !== undefined &&
      morphTargetDictionary[props.pet] !== undefined
    ) {
      setMorphInfluence(1);
    } else {
      setMorphInfluence(0);
    }
  }, [props.pet, morphTargetDictionary, setMorphInfluence]);

  if (!props.cosmetic) return null;

  return (
    <skinnedMesh
      ref={mesh}
      {...props}
      name={props.cosmetic}
      geometry={model.nodes[`head_slot_${props.cosmetic}`].geometry}
      material={model.materials.vertex_color}
      morphTargetDictionary={model.nodes.head_slot_beanie.morphTargetDictionary}
      morphTargetInfluences={[morphInfluence]}
    />
  );
};

export default HeadSlot;
