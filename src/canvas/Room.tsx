/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { TextureLoader } from "three/src/loaders/TextureLoader.js";
import { useLoader } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    wall_room: THREE.Mesh;
    window_frame: THREE.Mesh;
    curtain_pole: THREE.Mesh;
    curtain__loops_r: THREE.Mesh;
    curtain_r: THREE.Mesh;
    wall_outside: THREE.Mesh;
    Cube_table: THREE.Mesh;
    Cylinder_Chair: THREE.Mesh;
    Cube_shelf_legs: THREE.Mesh;
    Cube_shelf_planes: THREE.Mesh;
    background_scene: THREE.Mesh;
    window_emission: THREE.Mesh;
    floor001: THREE.Mesh;
  };
};

const material = new THREE.MeshBasicMaterial();
const materialBackground = new THREE.MeshBasicMaterial();

export function Room(props: JSX.IntrinsicElements["group"]) {

  const { nodes } = useGLTF(
    "models/PomodoroPet_Room_2.glb"
  ) as GLTFResult;

  const texture = useLoader(TextureLoader, "textures/room_baked_texture_v2.jpg");
  texture.flipY = false;

 /*  const gradient = useLoader(TextureLoader, "textures/gradient3_grey.jpg");
  gradient.minFilter = THREE.NearestFilter;
  gradient.magFilter = THREE.NearestFilter;
  gradient.generateMipmaps = false; */
  
  return (
    <group {...props} dispose={null}>
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.wall_room.geometry}
      material={material}
      material-map={texture}
      position={[0, -0.1, 0]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.window_frame.geometry}
      material={material}
      material-map={texture}
      position={[0, 0.67, -1.46]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.curtain_pole.geometry}
      material={material}
      material-map={texture}
      position={[0, 1.7, -1.26]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.curtain__loops_r.geometry}
      material={material}
      material-map={texture}
      position={[0, 1.7, -1.26]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.curtain_r.geometry}
      material={material}
      material-map={texture}
      position={[0, 1.7, -1.26]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.wall_outside.geometry}
      material={material}
      material-map={texture}
      position={[0, -0.1, 0]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Cube_table.geometry}
      material={material}
      material-map={texture}
      position={[-1, 0.3, -0.01]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Cylinder_Chair.geometry}
      material={material}
      material-map={texture}
      position={[-0.4, 0.192, -0.01]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Cube_shelf_legs.geometry}
      material={material}
      material-map={texture}
      position={[-1, 0.3, -0.94]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Cube_shelf_planes.geometry}
      material={material}
      material-map={texture}
      position={[-1, 0.3, -0.94]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.background_scene.geometry}
      material={materialBackground}
      position={[0, -0.2, 0]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.window_emission.geometry}
      material={material}
      material-map={texture}
      position={[0, -0.1, 0]}
    />
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.floor001.geometry}
      material={material}
      material-map={texture}
      position={[0, -0.1, 0]}
    />
  </group>
  );
}

useGLTF.preload("models/pomodoropet_layout_4.glb");
